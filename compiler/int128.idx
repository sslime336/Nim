nimTitle	int128	int128.html	module int128		0
nim	Int128	int128.html#Int128	object Int128		12
nim	Zero	int128.html#Zero	const Zero		23
nim	One	int128.html#One	const One		24
nim	Ten	int128.html#Ten	const Ten		25
nim	NegOne	int128.html#NegOne	const NegOne		28
nim	low	int128.html#low.t,typedesc[Int128]	template low(t: typedesc[Int128]): Int128		30
nim	high	int128.html#high.t,typedesc[Int128]	template high(t: typedesc[Int128]): Int128		31
nim	`$`	int128.html#$,Int128	proc `$`(a: Int128): string		33
nim	toInt128	int128.html#toInt128,T	proc toInt128[T: SomeInteger | bool](arg: T): Int128		35
nim	toInt64	int128.html#toInt64,Int128	proc toInt64(arg: Int128): int64		64
nim	toInt64Checked	int128.html#toInt64Checked,Int128,int64	proc toInt64Checked(arg: Int128; onError: int64): int64		74
nim	toInt32	int128.html#toInt32,Int128	proc toInt32(arg: Int128): int32		83
nim	toInt16	int128.html#toInt16,Int128	proc toInt16(arg: Int128): int16		95
nim	toInt8	int128.html#toInt8,Int128	proc toInt8(arg: Int128): int8		107
nim	toInt	int128.html#toInt,Int128	proc toInt(arg: Int128): int		119
nim	toUInt64	int128.html#toUInt64,Int128	proc toUInt64(arg: Int128): uint64		125
nim	toUInt32	int128.html#toUInt32,Int128	proc toUInt32(arg: Int128): uint32		130
nim	toUInt16	int128.html#toUInt16,Int128	proc toUInt16(arg: Int128): uint16		136
nim	toUInt8	int128.html#toUInt8,Int128	proc toUInt8(arg: Int128): uint8		142
nim	toUInt	int128.html#toUInt,Int128	proc toUInt(arg: Int128): uint		148
nim	castToInt64	int128.html#castToInt64,Int128	proc castToInt64(arg: Int128): int64		154
nim	castToUInt64	int128.html#castToUInt64,Int128	proc castToUInt64(arg: Int128): uint64		158
nim	addToHex	int128.html#addToHex,string,Int128	proc addToHex(result: var string; arg: Int128)		167
nim	toHex	int128.html#toHex,Int128	proc toHex(arg: Int128): string		173
nim	inc	int128.html#inc,Int128,uint32	proc inc(a: var Int128; y: uint32 = 1)		177
nim	cmp	int128.html#cmp,Int128,Int128	proc cmp(a, b: Int128): int		187
nim	`<`	int128.html#<,Int128,Int128	proc `<`(a, b: Int128): bool		197
nim	`<=`	int128.html#<=,Int128,Int128	proc `<=`(a, b: Int128): bool		200
nim	`==`	int128.html#==,Int128,Int128	proc `==`(a, b: Int128): bool		203
nim	bitnot	int128.html#bitnot,Int128	proc bitnot(a: Int128): Int128		210
nim	bitand	int128.html#bitand,Int128,Int128	proc bitand(a, b: Int128): Int128		216
nim	bitor	int128.html#bitor,Int128,Int128	proc bitor(a, b: Int128): Int128		222
nim	bitxor	int128.html#bitxor,Int128,Int128	proc bitxor(a, b: Int128): Int128		228
nim	`shr`	int128.html#shr,Int128,int	proc `shr`(a: Int128; b: int): Int128		234
nim	`shl`	int128.html#shl,Int128,int	proc `shl`(a: Int128; b: int): Int128		260
nim	`+`	int128.html#+,Int128,Int128	proc `+`(a, b: Int128): Int128		283
nim	`+=`	int128.html#+=,Int128,Int128	proc `+=`(a: var Int128; b: Int128)		293
nim	`-`	int128.html#-,Int128	proc `-`(a: Int128): Int128		296
nim	`-`	int128.html#-,Int128,Int128	proc `-`(a, b: Int128): Int128		300
nim	`-=`	int128.html#-=,Int128,Int128	proc `-=`(a: var Int128; b: Int128)		303
nim	abs	int128.html#abs,Int128	proc abs(a: Int128): Int128		306
nim	`*`	int128.html#*,Int128,int32	proc `*`(a: Int128; b: int32): Int128		329
nim	`*`	int128.html#*,Int128,Int128	proc `*`(lhs, rhs: Int128): Int128		349
nim	`*=`	int128.html#*=,Int128,Int128	proc `*=`(a: var Int128; b: Int128)		358
nim	fastLog2	int128.html#fastLog2,Int128	proc fastLog2(a: Int128): int		363
nim	divMod	int128.html#divMod,Int128,Int128	proc divMod(dividend, divisor: Int128): tuple[quotient, remainder: Int128]		374
nim	`div`	int128.html#div,Int128,Int128	proc `div`(a, b: Int128): Int128		424
nim	`mod`	int128.html#mod,Int128,Int128	proc `mod`(a, b: Int128): Int128		428
nim	addInt128	int128.html#addInt128,string,Int128	proc addInt128(result: var string; value: Int128)		432
nim	parseDecimalInt128	int128.html#parseDecimalInt128,string,int	proc parseDecimalInt128(arg: string; pos: int = 0): Int128		460
nim	`<`	int128.html#<,Int128,BiggestInt	proc `<`(a: Int128; b: BiggestInt): bool		481
nim	`<`	int128.html#<,BiggestInt,Int128	proc `<`(a: BiggestInt; b: Int128): bool		484
nim	`<=`	int128.html#<=,Int128,BiggestInt	proc `<=`(a: Int128; b: BiggestInt): bool		487
nim	`<=`	int128.html#<=,BiggestInt,Int128	proc `<=`(a: BiggestInt; b: Int128): bool		490
nim	`==`	int128.html#==,Int128,BiggestInt	proc `==`(a: Int128; b: BiggestInt): bool		493
nim	`==`	int128.html#==,BiggestInt,Int128	proc `==`(a: BiggestInt; b: Int128): bool		496
nim	`-`	int128.html#-,BiggestInt,Int128	proc `-`(a: BiggestInt; b: Int128): Int128		499
nim	`-`	int128.html#-,Int128,BiggestInt	proc `-`(a: Int128; b: BiggestInt): Int128		502
nim	`+`	int128.html#+,BiggestInt,Int128	proc `+`(a: BiggestInt; b: Int128): Int128		505
nim	`+`	int128.html#+,Int128,BiggestInt	proc `+`(a: Int128; b: BiggestInt): Int128		508
nim	toFloat64	int128.html#toFloat64,Int128	proc toFloat64(arg: Int128): float64		511
nim	toInt128	int128.html#toInt128,float64	proc toInt128(arg: float64): Int128		526
nim	maskUInt64	int128.html#maskUInt64,Int128	proc maskUInt64(arg: Int128): Int128		541
nim	maskUInt32	int128.html#maskUInt32,Int128	proc maskUInt32(arg: Int128): Int128		547
nim	maskUInt16	int128.html#maskUInt16,Int128	proc maskUInt16(arg: Int128): Int128		553
nim	maskUInt8	int128.html#maskUInt8,Int128	proc maskUInt8(arg: Int128): Int128		559
nim	maskBytes	int128.html#maskBytes,Int128,int	proc maskBytes(arg: Int128; numbytes: int): Int128		565
nimgrp	<	int128.html#<-procs-all	proc		197
nimgrp	*	int128.html#*-procs-all	proc		329
nimgrp	-	int128.html#--procs-all	proc		296
nimgrp	+	int128.html#+-procs-all	proc		283
nimgrp	toint128	int128.html#toInt128-procs-all	proc		35
nimgrp	<=	int128.html#<=-procs-all	proc		200
nimgrp	==	int128.html#==-procs-all	proc		203
